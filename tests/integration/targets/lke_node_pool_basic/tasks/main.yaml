- name: lke_cluster_basic
  block:
    - set_fact:
        r: "{{ 1000000000 | random }}"

    - name: Resolve the latest K8s version
      linode.cloud.lke_version_list: {}
      register: lke_versions

    - set_fact:
        kube_version: '{{ lke_versions.lke_versions[0].id }}'

    - name: List regions that support Disk Encryption
      linode.cloud.region_list: {}
      register: all_regions

    - set_fact:
        lde_region: '{{ (all_regions.regions | selectattr("capabilities", "search", "Disk Encryption") | list)[0].id }}'

    - name: Create a minimal LKE cluster
      linode.cloud.lke_cluster:
        label: 'ansible-test-{{ r }}'
        region: us-southeast
        k8s_version: '{{ kube_version }}'
        node_pools:
          - type: g6-standard-1
            count: 1
        skip_polling: true
        state: present
      register: create_cluster

    - name: Assert minimal LKE cluster is created
      assert:
        that:
          - create_cluster.cluster.k8s_version == kube_version
          - create_cluster.cluster.region == 'us-southeast'
          - create_cluster.node_pools[0].type == 'g6-standard-1'
          - create_cluster.node_pools[0].count == 1

    - name: Add a node pool to the cluster
      linode.cloud.lke_node_pool:
        cluster_id: '{{ create_cluster.cluster.id }}'

        tags: ['my-pool']
        type: g6-standard-1
        count: 2
        labels:
          foo.example.com/test: bar
          foo.example.com/test2: foo
        taints:
          - key: foo.example.com/test2
            value: test
            effect: NoExecute
        state: present
      register: new_pool

    - name: Assert node pool is added to cluster
      assert:
        that:
          - new_pool.node_pool.count == 2
          - new_pool.node_pool.type == 'g6-standard-1'
          - new_pool.node_pool.nodes[0].status == 'ready'
          - new_pool.node_pool.nodes[1].status == 'ready'
          - new_pool.node_pool.labels['foo.example.com/test'] == 'bar'
          - new_pool.node_pool.labels['foo.example.com/test2'] == 'foo'
          - new_pool.node_pool.taints[0].key == 'foo.example.com/test2'
          - new_pool.node_pool.taints[0].value == 'test'
          - new_pool.node_pool.taints[0].effect == 'NoExecute'

    - name: Attempt to update an invalid field on the node pool
      linode.cloud.lke_node_pool:
        cluster_id: '{{ create_cluster.cluster.id }}'

        tags: [ 'my-pool' ]
        type: g6-standard-2
        count: 2
        state: present
      register: update_pool_fail
      failed_when: '"failed to update" not in update_pool_fail.msg'

    - name: Update the node pool
      linode.cloud.lke_node_pool:
        cluster_id: '{{ create_cluster.cluster.id }}'

        tags: ['my-pool']
        type: g6-standard-1
        count: 1
        skip_polling: true
        autoscaler:
          enabled: true
          min: 1
          max: 3
        labels:
          foo.example.com/update: updated
          foo.example.com/test2: foo
        taints:
          - key: foo.example.com/update
            value: updated
            effect: PreferNoSchedule
        state: present
      register: update_pool

    - name: Assert node pool is updated
      assert:
        that:
          - update_pool.node_pool.count == 1
          - update_pool.node_pool.type == 'g6-standard-1'
          - update_pool.node_pool.autoscaler.enabled
          - update_pool.node_pool.autoscaler.min == 1
          - update_pool.node_pool.autoscaler.max == 3
          - update_pool.node_pool.labels['foo.example.com/update'] == 'updated'
          - update_pool.node_pool.labels['foo.example.com/test2'] == 'foo'
          - update_pool.node_pool.taints[0].key == 'foo.example.com/update'
          - update_pool.node_pool.taints[0].value == 'updated'
          - update_pool.node_pool.taints[0].effect == 'PreferNoSchedule'

    - name: Create a minimal LKE cluster
      linode.cloud.lke_cluster:
        label: 'ansible-test-de-{{ r }}'
        region: '{{ lde_region }}'
        k8s_version: '{{ kube_version }}'
        node_pools:
          - type: g6-standard-1
            count: 1
        skip_polling: true
        state: present
      register: create_cluster_de

    - name: Assert minimal LKE cluster is created
      assert:
        that:
          - create_cluster_de.cluster.k8s_version == kube_version
          - create_cluster_de.node_pools[0].type == 'g6-standard-1'
          - create_cluster_de.node_pools[0].count == 1

    - name: Add a node pool to the cluster
      linode.cloud.lke_node_pool:
        cluster_id: '{{ create_cluster_de.cluster.id }}'

        tags: ['my-pool']
        type: g6-standard-1
        count: 2
        state: present
      register: new_pool_de

    - name: Assert node pool is added to cluster
      assert:
        that:
          - new_pool_de.node_pool.count == 2
          - new_pool_de.node_pool.type == 'g6-standard-1'
          - new_pool_de.node_pool.disk_encryption == 'enabled'
          - new_pool_de.node_pool.nodes[0].status == 'ready'
          - new_pool_de.node_pool.nodes[1].status == 'ready'

  always:
    - ignore_errors: yes
      block:
        - name: Delete the LKE cluster node pool
          linode.cloud.lke_node_pool:
            cluster_id: '{{ create_cluster.cluster.id }}'
            tags: ['my-pool']
            state: absent
        - name: Delete the LKE cluster
          linode.cloud.lke_cluster:
            label: '{{ create_cluster.cluster.label }}'
            state: absent
        - name: Delete the LKE cluster node pool
          linode.cloud.lke_node_pool:
            cluster_id: '{{ create_cluster_de.cluster.id }}'
            tags: ['my-pool']
            state: absent
        - name: Delete the LKE cluster
          linode.cloud.lke_cluster:
            label: '{{ create_cluster_de.cluster.label }}'
            state: absent

  environment:
    LINODE_UA_PREFIX: '{{ ua_prefix }}'
    LINODE_API_TOKEN: '{{ api_token }}'
    LINODE_API_URL: '{{ api_url }}'
    LINODE_API_VERSION: '{{ api_version }}'
    LINODE_CA: '{{ ca_file or "" }}'

