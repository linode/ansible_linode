- name: lke_cluster_basic
  block:
    - set_fact:
        r: "{{ 1000000000 | random }}"

    - name: Resolve the latest K8s version
      linode.cloud.lke_version_list: {}
      register: get_lke_versions

    - set_fact:
        lke_versions: '{{ get_lke_versions.lke_versions|sort(attribute="id") }}'

    - set_fact:
        old_kube_version: '{{ lke_versions[0].id }}'

        # Sometimes only one LKE version is available for provisioning
        kube_version: '{{ lke_versions[1].id if lke_versions|length > 1 else lke_versions[0].id }}'

    - name: List regions that support Disk Encryption
      linode.cloud.region_list: {}
      register: all_regions

    - set_fact:
        lde_region: '{{ (all_regions.regions | selectattr("capabilities", "search", "Disk Encryption") | list)[0].id }}'

    - name: Create a Linode LKE cluster
      linode.cloud.lke_cluster:
        label: 'ansible-test-{{ r }}'
        region: us-southeast
        k8s_version: '{{ old_kube_version }}'
        node_pools:
          - type: g6-standard-1
            count: 3
            labels:
               foo.example.com/test: bar
               foo.example.com/test2: foo
            taints:
                - key: foo.example.com/test2
                  value: test
                  effect: NoExecute
          - type: g6-standard-4
            count: 1
            autoscaler:
              enabled: true
              min: 1
              max: 2
        skip_polling: true
        state: present
      register: create_cluster

    - name: Assert LKE cluster is created
      assert:
        that:
          - create_cluster.cluster.k8s_version == old_kube_version
          - create_cluster.cluster.region == 'us-southeast'
          - create_cluster.node_pools[0].type == 'g6-standard-1'
          - create_cluster.node_pools[0].count == 3
          - create_cluster.node_pools[0].labels['foo.example.com/test'] == 'bar'
          - create_cluster.node_pools[0].labels['foo.example.com/test2'] == 'foo'
          - create_cluster.node_pools[0].taints[0].key == 'foo.example.com/test2'
          - create_cluster.node_pools[0].taints[0].value == 'test'
          - create_cluster.node_pools[0].taints[0].effect == 'NoExecute'
          - create_cluster.node_pools[1].autoscaler.enabled
          - create_cluster.node_pools[1].autoscaler.min == 1
          - create_cluster.node_pools[1].autoscaler.max == 2

    - name: Update the cluster's node pools
      linode.cloud.lke_cluster:
        label: '{{ create_cluster.cluster.label }}'
        region: us-southeast
        k8s_version: '{{ old_kube_version }}'
        skip_polling: true
        node_pools:
          - type: g6-standard-1
            count: 2
            labels:
              foo.example.com/update: updated
              foo.example.com/test2: foo
            taints:
              - key: foo.example.com/update
                value: updated
                effect: PreferNoSchedule
          - type: g6-standard-2
            count: 1
          - type: g6-standard-1
            count: 2
        state: present
      register: update_pools

    - name: Assert cluster's node pools are updated
      assert:
        that:
          - update_pools.cluster.k8s_version == old_kube_version
          - update_pools.cluster.region == 'us-southeast'

          - update_pools.node_pools | length == 3

          - update_pools.node_pools[0].type == 'g6-standard-1'
          - update_pools.node_pools[0].count == 2
          - update_pools.node_pools[0].id == create_cluster.node_pools[0].id

          - update_pools.node_pools[0].labels['foo.example.com/update'] == 'updated'
          - update_pools.node_pools[0].labels['foo.example.com/test2'] == 'foo'
          - update_pools.node_pools[0].taints[0].key == 'foo.example.com/update'
          - update_pools.node_pools[0].taints[0].value == 'updated'
          - update_pools.node_pools[0].taints[0].effect == 'PreferNoSchedule'

          - update_pools.node_pools[1].type == 'g6-standard-2'
          - update_pools.node_pools[1].count == 1
          - update_pools.node_pools[2].type == 'g6-standard-1'
          - update_pools.node_pools[2].count == 2

    - name: Upgrade the cluster
      linode.cloud.lke_cluster:
        label: '{{ create_cluster.cluster.label }}'
        region: us-southeast
        k8s_version: '{{ kube_version }}'
        high_availability: true
        skip_polling: true
        node_pools:
          - type: g6-standard-1
            count: 1
            autoscaler:
              enabled: true
              min: 1
              max: 3
        state: present
      register: upgrade

    - name: Assert cluster is updated
      assert:
        that:
          - upgrade.cluster.k8s_version == kube_version
          - upgrade.cluster.control_plane.high_availability == True
          - upgrade.cluster.region == 'us-southeast'

          - upgrade.node_pools | length == 1

          - upgrade.node_pools[0].type == 'g6-standard-1'
          - upgrade.node_pools[0].count == 1
          - upgrade.node_pools[0].id == create_cluster.node_pools[0].id
          - upgrade.node_pools[0].autoscaler.enabled
          - upgrade.node_pools[0].autoscaler.min == 1
          - upgrade.node_pools[0].autoscaler.max == 3

    - name: Get lke_cluster_info about the cluster by id
      linode.cloud.lke_cluster_info:
        id: '{{ upgrade.cluster.id }}'


      register: info_by_id

    - name: Assert lke_cluster_info about cluster by id
      assert:
        that:
          - info_by_id.cluster.k8s_version == kube_version
          - info_by_id.cluster.region == 'us-southeast'

          - info_by_id.node_pools | length == 1

          - info_by_id.node_pools[0].type == 'g6-standard-1'
          - info_by_id.node_pools[0].count == 1
          - info_by_id.node_pools[0].id == create_cluster.node_pools[0].id

    - name: Get lke_cluster_info about the cluster by label
      linode.cloud.lke_cluster_info:
        label: '{{ upgrade.cluster.label }}'
      register: info_by_label

    - name: Assert lke_cluster_info about cluster by label
      assert:
        that:
          - info_by_label.cluster.k8s_version == kube_version
          - info_by_label.cluster.region == 'us-southeast'

          - info_by_label.node_pools | length == 1

          - info_by_label.node_pools[0].type == 'g6-standard-1'
          - info_by_label.node_pools[0].count == 1
          - info_by_label.node_pools[0].id == create_cluster.node_pools[0].id

    - name: Create a Linode LKE cluster with a pool with disk encryption enabled
      linode.cloud.lke_cluster:
        label: 'ansible-test-de-{{ r }}'
        region: '{{ lde_region }}'
        k8s_version: '{{ old_kube_version }}'
        node_pools:
          - type: g6-standard-1
            count: 3
        skip_polling: true
        state: present
      register: create_cluster_disk_encryption

    - name: Assert LKE cluster is created
      assert:
        that:
          - create_cluster_disk_encryption.node_pools[0].disk_encryption == 'enabled'

  always:
    - ignore_errors: yes
      block:
        - name: Delete the LKE cluster
          linode.cloud.lke_cluster:
            label: '{{ create_cluster.cluster.label }}'
            state: absent

        - name: Delete the LKE cluster
          linode.cloud.lke_cluster:
            label: '{{ create_cluster_disk_encryption.cluster.label }}'
            state: absent
      

  environment:
    LINODE_UA_PREFIX: '{{ ua_prefix }}'
    LINODE_API_TOKEN: '{{ api_token }}'
    LINODE_API_URL: '{{ api_url }}'
    LINODE_API_VERSION: '{{ api_version }}'
    LINODE_CA: '{{ ca_file or "" }}'

