- name: instance_basic
  block:
    - set_fact:
        r: "{{ 1000000000 | random }}"

    - name: List regions that support PGs
      linode.cloud.region_list: {}
      register: all_regions

    - set_fact:
        pg_region: '{{ (all_regions.regions | selectattr("capabilities", "search", "Placement Group") | list)[0].id }}'

    - name: Create a Linode instance without a root password
      linode.cloud.instance:
        label: 'ansible-test-nopass-{{ r }}'
        region: us-ord
        type: g6-standard-1
        image: linode/ubuntu22.04
        private_ip: true
        wait: false
        state: present
        firewall_id: '{{ firewall_id }}'
      register: create

    - name: Assert instance created
      assert:
        that:
          - create.changed
          - create.instance.ipv4|length > 1
          - create.networking.ipv4.public[0].address != None

    - name: Create a Linode instance with additional ips and without a root password
      linode.cloud.instance:
        label: 'ansible-test-additional-ips-nopass-{{ r }}'
        region: us-ord
        type: g6-standard-1
        image: linode/ubuntu22.04
        private_ip: true
        wait: false
        state: present
        additional_ipv4:
          - public: true
        firewall_id: '{{ firewall_id }}'
      register: create_additional_ips

    - name: Assert instance created
      assert:
        that:
          - create_additional_ips.changed
          - create_additional_ips.instance.ipv4|length == 3
          - create_additional_ips.networking.ipv4.public[0].address != None

    - name: Update the instance region and type
      linode.cloud.instance:
        label: '{{ create.instance.label }}'
        region: us-ord
        group: funny
        type: g6-standard-2
        image: linode/ubuntu22.04
        private_ip: true
        state: present
      register: invalid_update
      failed_when:
        - invalid_update.changed == false

    - name: Update label with invalid string
      linode.cloud.instance:
        label: '!!Invalid!!'
        region: us-ord
        group: funny
        type: g6-standard-2
        image: linode/ubuntu22.04
        private_ip: true
        state: present
      register: invalid_update
      failed_when:
        - invalid_update.changed == true

    - name: Attempt to add additional ips to an instance
      linode.cloud.instance:
        label: '{{ create_additional_ips.instance.label }}'
        region: us-ord
        type: g6-standard-1
        image: linode/ubuntu22.04
        private_ip: true
        wait: false
        state: present
        additional_ipv4:
          - public: true
          - public: true
      register: invalid_update_add_ips
      failed_when:
        - "'additional_ipv4' not in invalid_update_add_ips.msg"

    - name: Attempt to remove additional ips from an instance
      linode.cloud.instance:
        label: '{{ create_additional_ips.instance.label }}'
        region: us-ord
        type: g6-standard-1
        image: linode/ubuntu22.04
        private_ip: true
        wait: false
        state: present
      register: invalid_update_remove_ips
      failed_when:
        - "'additional_ipv4' not in invalid_update_remove_ips.msg"

    - name: Update the instance
      linode.cloud.instance:
        label: '{{ create.instance.label }}'
        region: us-ord
        group: funny
        type: g6-standard-1
        image: linode/ubuntu22.04
        private_ip: true
        state: present
      register: update

    - name: Assert update
      assert:
        that:
          - update.instance.group == 'funny'

    - name: Get info about the instance by id
      linode.cloud.instance_info:
        id: '{{ create.instance.id }}'
      register: info_id

    - name: Assert instance info
      assert:
        that:
          - info_id.instance.ipv4|length > 1
          - info_id.instance.region == 'us-ord'
          - info_id.configs|length == 1
          - info_id.networking.ipv4.public[0].address != None

    - name: Get info about the instance by label
      linode.cloud.instance_info:
        label: '{{ create.instance.label }}'
      register: info_label

    - name: Assert instance info
      assert:
        that:
          - info_label.instance.ipv4|length > 1
          - info_label.instance.region == 'us-ord'
          - info_label.configs|length == 1

    - name: Create a Linode placement group
      linode.cloud.placement_group:
        label: 'ansible-test-{{ r }}'
        region: '{{ pg_region }}'
        affinity_type: anti_affinity:local
        state: present
      register: pg_created

    - name: Create a Linode instance under a placement group
      linode.cloud.instance:
        label: 'ansible-test-pg-{{ r }}'
        type: g6-nanode-1
        region: '{{ pg_region }}'
        placement_group:
          id: '{{ pg_created.placement_group.id }}'
          compliant_only: false
        state: present
      register: instance_pg

    - name: Assert instance under a placement group
      assert:
        that:
          instance_pg.instance.placement_group.id == pg_created.placement_group.id

  always:
    - ignore_errors: yes
      block:
        - name: Delete a Linode instance
          linode.cloud.instance:
            label: '{{ update.instance.label }}'
            state: absent
          register: delete_nopass

        - name: Assert instance delete succeeded
          assert:
            that:
              - delete_nopass.changed
              - delete_nopass.instance.id == update.instance.id

        - name: Delete a Linode instance
          linode.cloud.instance:
            label: '{{ create_additional_ips.instance.label }}'
            state: absent
          register: delete_nopass_ips

        - name: Assert instance delete succeeded
          assert:
            that:
              - delete_nopass_ips.changed
              - delete_nopass_ips.instance.id == create_additional_ips.instance.id

        - name: Delete a Linode instance
          linode.cloud.instance:
            label: '{{ instance_pg.instance.label }}'
            state: absent
          register: delete_instance_pg

        - name: Assert instance delete succeeded
          assert:
            that:
              - delete_instance_pg.changed
              - delete_instance_pg.instance.id == instance_pg.instance.id

        - name: Delete a placement group
          linode.cloud.placement_group:
            label: '{{ pg_created.placement_group.label }}'
            state: absent
          register: pg_deleted

        - name: Assert placement group is deleted
          assert:
            that:
              - pg_deleted.changed
              - pg_deleted.placement_group.id == pg_created.placement_group.id

  environment:
    LINODE_UA_PREFIX: '{{ ua_prefix }}'
    LINODE_API_TOKEN: '{{ api_token }}'
    LINODE_API_URL: '{{ api_url }}'
    LINODE_API_VERSION: '{{ api_version }}'
    LINODE_CA: '{{ ca_file or "" }}'

